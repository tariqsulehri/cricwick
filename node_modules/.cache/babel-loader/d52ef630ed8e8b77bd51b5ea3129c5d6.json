{"ast":null,"code":"import _Object$assign from 'babel-runtime/core-js/object/assign';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isRequiredIf from 'react-proptype-conditional-require';\nimport ExecutionEnvironment from 'exenv';\nvar twitter_widget_js = 'https://platform.twitter.com/widgets.js';\n\nvar TwitterTimelineEmbed = function (_Component) {\n  _inherits(TwitterTimelineEmbed, _Component);\n\n  function TwitterTimelineEmbed() {\n    _classCallCheck(this, TwitterTimelineEmbed);\n\n    return _possibleConstructorReturn(this, (TwitterTimelineEmbed.__proto__ || _Object$getPrototypeOf(TwitterTimelineEmbed)).apply(this, arguments));\n  }\n\n  _createClass(TwitterTimelineEmbed, [{\n    key: 'buildChromeOptions',\n    value: function buildChromeOptions(options) {\n      options.chrome = '';\n\n      if (this.props.noHeader) {\n        options.chrome = options.chrome + ' noheader';\n      }\n\n      if (this.props.noFooter) {\n        options.chrome = options.chrome + ' nofooter';\n      }\n\n      if (this.props.noBorders) {\n        options.chrome = options.chrome + ' noborders';\n      }\n\n      if (this.props.noScrollbar) {\n        options.chrome = options.chrome + ' noscrollbar';\n      }\n\n      if (this.props.transparent) {\n        options.chrome = options.chrome + ' transparent';\n      }\n\n      return options;\n    }\n  }, {\n    key: 'buildOptions',\n    value: function buildOptions() {\n      var options = _Object$assign({}, this.props.options);\n\n      if (this.props.autoHeight) {\n        options.height = this.refs.embedContainer.parentNode.offsetHeight;\n      }\n\n      options = _Object$assign({}, options, {\n        theme: this.props.theme,\n        linkColor: this.props.linkColor,\n        borderColor: this.props.borderColor,\n        lang: this.props.lang\n      });\n      return options;\n    }\n  }, {\n    key: 'renderWidget',\n    value: function renderWidget(options) {\n      if (!this.isMountCanceled) {\n        window.twttr.widgets.createTimeline({\n          sourceType: this.props.sourceType,\n          screenName: this.props.screenName,\n          userId: this.props.userId,\n          ownerScreenName: this.props.ownerScreenName,\n          slug: this.props.slug,\n          id: this.props.id || this.props.widgetId,\n          url: this.props.url\n        }, this.refs.embedContainer, options);\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitter_widget_js, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterTimelineEmbed, aborting load.');\n            return;\n          }\n\n          var options = _this2.buildOptions();\n          /** Append chrome options */\n\n\n          options = _this2.buildChromeOptions(options);\n\n          _this2.renderWidget(options);\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        ref: 'embedContainer'\n      });\n    }\n  }]);\n\n  return TwitterTimelineEmbed;\n}(Component);\n\nTwitterTimelineEmbed.propTypes = {\n  /**\n       * This can be either of profile, likes, list, collection, URL, widget\n       */\n  sourceType: PropTypes.oneOf(['profile', 'likes', 'list', 'collection', 'URL', 'widget']).isRequired,\n\n  /**\n       * username of twitter handle as String\n       */\n  screenName: isRequiredIf(PropTypes.string, function (props) {\n    return !props.hasOwnProperty('userId') && (props.sourceType === 'profile' || props.sourceType === 'likes');\n  }),\n\n  /**\n       * UserId of twitter handle as number\n       */\n  userId: isRequiredIf(PropTypes.number, function (props) {\n    return !props.hasOwnProperty('screenName') && (props.sourceType === 'profile' || props.sourceType === 'likes');\n  }),\n\n  /**\n       * To show list, used along with slug\n       */\n  ownerScreenName: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('id');\n  }),\n\n  /**\n       * To show list, used along with ownerScreenName\n       */\n  slug: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('id');\n  }),\n\n  /**\n       * To show list, unique list id\n       * Also used with collections, in that case its valid collection id\n       */\n  id: isRequiredIf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('ownerScreenName') && !props.hasOwnProperty('slug') || props.sourceType === 'collection';\n  }),\n\n  /**\n       * To show twitter content with url.\n       * Supported content includes profiles, likes, lists, and collections.\n       */\n  url: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'url';\n  }),\n\n  /**\n       * To show custom widget\n       */\n  widgetId: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'widget';\n  }),\n\n  /**\n       * Additional options to pass to twitter widget plugin\n       */\n  options: PropTypes.object,\n\n  /**\n       * Automatically fit into parent container height\n       */\n  autoHeight: PropTypes.bool,\n\n  /**\n       * With dark or light theme\n       */\n  theme: PropTypes.oneOf(['dark', 'light']),\n\n  /**\n       * With custom link colors. Note: Only Hex colors are supported.\n       */\n  linkColor: PropTypes.string,\n\n  /**\n       * With custom border colors. Note: Only Hex colors are supported.\n       */\n  borderColor: PropTypes.string,\n\n  /**\n       * Hide the header from timeline\n       */\n  noHeader: PropTypes.bool,\n\n  /**\n       * Hide the footer from timeline\n       */\n  noFooter: PropTypes.bool,\n\n  /**\n       * Hide the border from timeline\n       */\n  noBorders: PropTypes.bool,\n\n  /**\n       * Hide the scrollbars\n       */\n  noScrollbar: PropTypes.bool,\n\n  /**\n       * Enable Transparancy\n       */\n  transparent: PropTypes.bool,\n\n  /**\n       * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html\n       */\n  lang: PropTypes.string\n};\n\nvar TwitterShareButton = function (_Component) {\n  _inherits(TwitterShareButton, _Component);\n\n  function TwitterShareButton() {\n    _classCallCheck(this, TwitterShareButton);\n\n    return _possibleConstructorReturn(this, (TwitterShareButton.__proto__ || _Object$getPrototypeOf(TwitterShareButton)).apply(this, arguments));\n  }\n\n  _createClass(TwitterShareButton, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitter_widget_js, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterShareButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createShareButton(_this2.props.url, _this2.refs.embedContainer, _this2.props.options);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        ref: 'embedContainer'\n      });\n    }\n  }]);\n\n  return TwitterShareButton;\n}(Component);\n\nTwitterShareButton.propTypes = {\n  /**\n  * Url for sharing\n  */\n  url: PropTypes.string.isRequired,\n\n  /**\n  * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters\n  */\n  options: PropTypes.object\n};\n\nvar TwitterFollowButton = function (_Component) {\n  _inherits(TwitterFollowButton, _Component);\n\n  function TwitterFollowButton() {\n    _classCallCheck(this, TwitterFollowButton);\n\n    return _possibleConstructorReturn(this, (TwitterFollowButton.__proto__ || _Object$getPrototypeOf(TwitterFollowButton)).apply(this, arguments));\n  }\n\n  _createClass(TwitterFollowButton, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitter_widget_js, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterFollowButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createFollowButton(_this2.props.screenName, _this2.refs.embedContainer, _this2.props.options);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        ref: 'embedContainer'\n      });\n    }\n  }]);\n\n  return TwitterFollowButton;\n}(Component);\n\nTwitterFollowButton.propTypes = {\n  /**\n       * Username of twitter user which will be followed on click\n       */\n  screenName: PropTypes.string.isRequired,\n\n  /**\n       * Additional options to be added to the button\n       */\n  options: PropTypes.object\n};\n\nvar TwitterHashtagButton = function (_Component) {\n  _inherits(TwitterHashtagButton, _Component);\n\n  function TwitterHashtagButton() {\n    _classCallCheck(this, TwitterHashtagButton);\n\n    return _possibleConstructorReturn(this, (TwitterHashtagButton.__proto__ || _Object$getPrototypeOf(TwitterHashtagButton)).apply(this, arguments));\n  }\n\n  _createClass(TwitterHashtagButton, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitter_widget_js, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterHashtagButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createHashtagButton(_this2.props.tag, _this2.refs.embedContainer, _this2.props.options);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        ref: 'embedContainer'\n      });\n    }\n  }]);\n\n  return TwitterHashtagButton;\n}(Component);\n\nTwitterHashtagButton.propTypes = {\n  /**\n       * Tag name for hashtag button\n       */\n  tag: PropTypes.string.isRequired,\n\n  /**\n       * Additional options to be added to the button\n       */\n  options: PropTypes.object\n};\n\nvar TwitterMentionButton = function (_Component) {\n  _inherits(TwitterMentionButton, _Component);\n\n  function TwitterMentionButton() {\n    _classCallCheck(this, TwitterMentionButton);\n\n    return _possibleConstructorReturn(this, (TwitterMentionButton.__proto__ || _Object$getPrototypeOf(TwitterMentionButton)).apply(this, arguments));\n  }\n\n  _createClass(TwitterMentionButton, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitter_widget_js, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterMentionButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createMentionButton(_this2.props.screenName, _this2.refs.embedContainer, _this2.props.options);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        ref: 'embedContainer'\n      });\n    }\n  }]);\n\n  return TwitterMentionButton;\n}(Component);\n\nTwitterMentionButton.propTypes = {\n  /**\n   * Username to which you will need to tweet\n   */\n  screenName: PropTypes.string.isRequired,\n\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object\n};\n\nvar TwitterTweetEmbed = function (_Component) {\n  _inherits(TwitterTweetEmbed, _Component);\n\n  function TwitterTweetEmbed() {\n    _classCallCheck(this, TwitterTweetEmbed);\n\n    return _possibleConstructorReturn(this, (TwitterTweetEmbed.__proto__ || _Object$getPrototypeOf(TwitterTweetEmbed)).apply(this, arguments));\n  }\n\n  _createClass(TwitterTweetEmbed, [{\n    key: 'renderWidget',\n    value: function renderWidget() {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr in TwitterTweetEmbed, aborting load.');\n        return;\n      }\n\n      if (!this.isMountCanceled) {\n        window.twttr.widgets.createTweet(this.props.tweetId, this.refs.embedContainer, this.props.options);\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitter_widget_js, 'twitter-embed', function () {\n          _this2.renderWidget();\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        ref: 'embedContainer'\n      });\n    }\n  }]);\n\n  return TwitterTweetEmbed;\n}(Component);\n\nTwitterTweetEmbed.propTypes = {\n  /**\n       * Tweet id that needs to be shown\n       */\n  tweetId: PropTypes.string.isRequired,\n\n  /**\n       * Additional options to pass to twitter widget plugin\n       */\n  options: PropTypes.object\n};\n\nvar TwitterMomentShare = function (_Component) {\n  _inherits(TwitterMomentShare, _Component);\n\n  function TwitterMomentShare() {\n    _classCallCheck(this, TwitterMomentShare);\n\n    return _possibleConstructorReturn(this, (TwitterMomentShare.__proto__ || _Object$getPrototypeOf(TwitterMomentShare)).apply(this, arguments));\n  }\n\n  _createClass(TwitterMomentShare, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitter_widget_js, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterMomentShare, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createMoment(_this2.props.momentId, _this2.refs.shareMoment, _this2.props.options);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        ref: 'shareMoment'\n      });\n    }\n  }]);\n\n  return TwitterMomentShare;\n}(Component);\n\nTwitterMomentShare.propTypes = {\n  /**\n   * id of Twitter moment to show\n   */\n  momentId: PropTypes.string.isRequired,\n\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object\n};\n\nvar TwitterDMButton = function (_Component) {\n  _inherits(TwitterDMButton, _Component);\n\n  function TwitterDMButton() {\n    _classCallCheck(this, TwitterDMButton);\n\n    return _possibleConstructorReturn(this, (TwitterDMButton.__proto__ || _Object$getPrototypeOf(TwitterDMButton)).apply(this, arguments));\n  }\n\n  _createClass(TwitterDMButton, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitter_widget_js, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterDMButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createDMButton(_this2.props.id, _this2.refs.embedContainer, _this2.props.options);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        ref: 'embedContainer'\n      });\n    }\n  }]);\n\n  return TwitterDMButton;\n}(Component);\n\nTwitterDMButton.propTypes = {\n  /**\n       * Twitter user id for DM button\n       */\n  id: PropTypes.number.isRequired,\n\n  /**\n       * Additional options to be added to the button\n       */\n  options: PropTypes.object\n};\n\nvar TwitterVideoEmbed = function (_Component) {\n  _inherits(TwitterVideoEmbed, _Component);\n\n  function TwitterVideoEmbed() {\n    _classCallCheck(this, TwitterVideoEmbed);\n\n    return _possibleConstructorReturn(this, (TwitterVideoEmbed.__proto__ || _Object$getPrototypeOf(TwitterVideoEmbed)).apply(this, arguments));\n  }\n\n  _createClass(TwitterVideoEmbed, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitter_widget_js, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterVideoEmbed, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createVideo(_this2.props.id, _this2.refs.embedContainer);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        ref: 'embedContainer'\n      });\n    }\n  }]);\n\n  return TwitterVideoEmbed;\n}(Component);\n\nTwitterVideoEmbed.propTypes = {\n  /**\n       * Id of video tweet.\n       */\n  id: PropTypes.string.isRequired\n};\n\nvar TwitterOnAirButton = function (_Component) {\n  _inherits(TwitterOnAirButton, _Component);\n\n  function TwitterOnAirButton() {\n    _classCallCheck(this, TwitterOnAirButton);\n\n    return _possibleConstructorReturn(this, (TwitterOnAirButton.__proto__ || _Object$getPrototypeOf(TwitterOnAirButton)).apply(this, arguments));\n  }\n\n  _createClass(TwitterOnAirButton, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitter_widget_js, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterOnAirButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createPeriscopeOnAirButton(_this2.props.username, _this2.refs.embedContainer, _this2.props.options);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        ref: 'embedContainer'\n      });\n    }\n  }]);\n\n  return TwitterOnAirButton;\n}(Component);\n\nTwitterOnAirButton.propTypes = {\n  /**\n   * Username for which you require periscope on air button\n   */\n  username: PropTypes.string.isRequired,\n\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object\n};\nexport { TwitterTimelineEmbed, TwitterShareButton, TwitterFollowButton, TwitterHashtagButton, TwitterMentionButton, TwitterTweetEmbed, TwitterMomentShare, TwitterDMButton, TwitterVideoEmbed, TwitterOnAirButton };","map":null,"metadata":{},"sourceType":"module"}