{"ast":null,"code":"import _classCallCheck from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\react\\\\cric-ngif\\\\src\\\\components\\\\home\\\\renderMatch.jsx\";\nimport React, { Component } from 'react';\nimport Moment from 'moment';\n\nvar RenderMatch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RenderMatch, _Component);\n\n  function RenderMatch(props) {\n    var _this;\n\n    _classCallCheck(this, RenderMatch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RenderMatch).call(this, props));\n\n    _this.headerTextMatchStatusClass = function (status) {\n      var isClass = status === 'Live' ? 'header-text-match-status-live' : 'header-text-match-status-normal';\n      return isClass;\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(RenderMatch, [{\n    key: \"renderMatchTeamATag\",\n    value: function renderMatchTeamATag(match) {\n      // innings_order = 1, 2, 3, 4\n      // batting_team_id\":  702,703 \n      // fielding_team_id\": 703,702\n      // inning.wickets, inning.run, inning.overs  \n      var scoreString = '';\n      var teamA = match.team_1_id; //console.log( \"A \" ,teamA);\n      //console.log( \"Innings \" , match);\n\n      if (!match.innings) {\n        console.log(\"Team=>(A) not yet Played...\");\n        return '';\n      }\n\n      var innings = match.innings.filter(function (x) {\n        return x.batting_team_id === teamA;\n      });\n      innings.map(function (inning) {\n        console.log(\"Series Id\", inning.innings_order);\n        scoreString += (inning.innings_order > 1 ? \" & \" : '') + inning.runs;\n        return 'scoreString';\n      });\n      console.log(scoreString);\n      return scoreString;\n    }\n  }, {\n    key: \"renderMatchTeamBTag\",\n    value: function renderMatchTeamBTag(match) {\n      // innings_order = 1, 2, 3, 4\n      // batting_team_id\":  702,703 \n      // fielding_team_id\": 703,702\n      // inning.wickets, inning.run, inning.overs  \n      var scoreString = '';\n      var teamB = match.team_2_id;\n\n      if (!match.innings) {\n        console.log(\"Team=>(B) not yet Played...\");\n        return '';\n      }\n\n      var innings = match.innings.filter(function (x) {\n        return x.batting_team_id === teamB;\n      });\n      innings.map(function (inning) {\n        console.log(\"Series Id\", inning.innings_order);\n        return '';\n      }); // if(!match.innings){\n      //    console.log(match.innings)\n      //    tagText =  <span></span>\n      //    return \n      // }   \n      // if (match.innings.length >= 1) {\n      //     tagText =\n      //         <span>\n      //             {match.innings[1].runs}{\" \"}/{\" \"}\n      //             {match.innings[1].wickets} {\" \"}\n      //             ({match.innings[1].overs})\n      //         </span>\n      // }\n\n      return scoreString;\n    } //This Method Change Color on the basic of Match Status if Live it will be red\n\n  }, {\n    key: \"renderMatchStatusAtHeader\",\n    //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \n    value: function renderMatchStatusAtHeader(match) {\n      var tagText = '';\n\n      if (match.match_state === 'Scheduled') {\n        tagText = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, \"Upcomming\", \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }));\n        return tagText;\n      }\n\n      if (match.break_type === \"\") {\n        tagText = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, match.match_state, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }));\n      } else {\n        tagText = React.createElement(\"span\", {\n          style: {\n            padding: 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, match.break_type, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }));\n      }\n\n      return tagText;\n    } //-------------------------------------------------------------------------------------------------\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var match = this.props.match; // match_state: \"Over\", detail: \"South Africa won by 6 wickets\"\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, match.title, \", \", ' at ', React.createElement(\"span\", {\n        style: {\n          color: 'Gray'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, match.venue.title), match.match_state === 'Over' ? 'Result' : '', React.createElement(\"span\", {\n        className: this.headerTextMatchStatusClass(match.match_state),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, this.renderMatchStatusAtHeader(match)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"header-flag-image\",\n        style: {\n          width: 25 + \"px\",\n          height: 25 + \"px\"\n        },\n        src: match.teamA.flag_url,\n        alt: \"no Iamge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"header-text-teams-shortname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, match.teamA.short_name), React.createElement(\"span\", {\n        className: \"header-text-teama-score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, this.renderMatchTeamATag(match)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"header-flag-image\",\n        style: {\n          width: 25 + \"px\",\n          height: 25 + \"px\"\n        },\n        src: match.teamB.flag_url,\n        alt: \"no Iamge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"header-text-teams-shortname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, match.teamB.short_name), React.createElement(\"span\", {\n        className: \"header-text-teama-score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, this.renderMatchTeamBTag(match)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), match.match_state === 'Over' ? match.detail : '', React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \" \", \" \", Moment(new Date(match.match_start)).format(\"DD MMM\"), \", \", Moment(new Date(match.match_start)).format(\"hh:mm a\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return RenderMatch;\n}(Component);\n\nexport default RenderMatch;","map":{"version":3,"sources":["D:\\react\\cric-ngif\\src\\components\\home\\renderMatch.jsx"],"names":["React","Component","Moment","RenderMatch","props","headerTextMatchStatusClass","status","isClass","state","match","scoreString","teamA","team_1_id","innings","console","log","filter","x","batting_team_id","map","inning","innings_order","runs","teamB","team_2_id","tagText","match_state","break_type","padding","title","color","venue","renderMatchStatusAtHeader","width","height","flag_url","short_name","renderMatchTeamATag","renderMatchTeamBTag","detail","Date","match_start","format"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Moment from 'moment';\r\n\r\nclass RenderMatch extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    renderMatchTeamATag(match) {\r\n        // innings_order = 1, 2, 3, 4\r\n        // batting_team_id\":  702,703 \r\n        // fielding_team_id\": 703,702\r\n        // inning.wickets, inning.run, inning.overs  \r\n\r\n        let scoreString = '';\r\n        const teamA = match.team_1_id;\r\n        \r\n        //console.log( \"A \" ,teamA);\r\n        //console.log( \"Innings \" , match);\r\n\r\n        if(!match.innings){\r\n            console.log(\"Team=>(A) not yet Played...\");\r\n            return '';\r\n        }\r\n\r\n        const innings =  match.innings.filter(x => x.batting_team_id === teamA)\r\n\r\n        innings.map((inning)=>{\r\n            console.log(\"Series Id\", inning.innings_order);\r\n            scoreString += (inning.innings_order > 1 ? \" & \" : '') \r\n                        +   inning.runs \r\n            return 'scoreString';\r\n         })\r\n      \r\n        console.log(scoreString); \r\n\r\n        return scoreString;\r\n    }\r\n\r\n    renderMatchTeamBTag(match) {\r\n       // innings_order = 1, 2, 3, 4\r\n        // batting_team_id\":  702,703 \r\n        // fielding_team_id\": 703,702\r\n        // inning.wickets, inning.run, inning.overs  \r\n\r\n        let scoreString = '';\r\n        const teamB = match.team_2_id;\r\n        \r\n        if(!match.innings){\r\n            console.log(\"Team=>(B) not yet Played...\");\r\n            return '';\r\n        }\r\n\r\n        const innings =  match.innings.filter(x => x.batting_team_id === teamB) \r\n\r\n        innings.map((inning)=>{\r\n            console.log(\"Series Id\", inning.innings_order);\r\n            return '';\r\n        })\r\n               \r\n        // if(!match.innings){\r\n        //    console.log(match.innings)\r\n        //    tagText =  <span></span>\r\n        //    return \r\n        // }   \r\n\r\n        // if (match.innings.length >= 1) {\r\n        //     tagText =\r\n        //         <span>\r\n        //             {match.innings[1].runs}{\" \"}/{\" \"}\r\n        //             {match.innings[1].wickets} {\" \"}\r\n        //             ({match.innings[1].overs})\r\n        //         </span>\r\n\r\n        // }\r\n        return scoreString;\r\n    }\r\n\r\n    //This Method Change Color on the basic of Match Status if Live it will be red\r\n    headerTextMatchStatusClass = (status) => {\r\n        const isClass = status === 'Live' ? 'header-text-match-status-live' : 'header-text-match-status-normal';\r\n        return isClass;\r\n    }\r\n\r\n\r\n    //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \r\n    renderMatchStatusAtHeader(match) {\r\n        let tagText = '';\r\n\r\n        if (match.match_state === 'Scheduled') {\r\n            tagText = <span>\r\n                            {\"Upcomming\"} <br/>\r\n                     </span> \r\n            return tagText;\r\n        }\r\n\r\n        if (match.break_type === \"\") {\r\n            tagText = <span>\r\n                {match.match_state} <br />\r\n            </span>\r\n        } else {\r\n            tagText = <span style={{ padding: 0 }}>\r\n                {match.break_type} <br />\r\n            </span>\r\n        }\r\n        return tagText;\r\n    }\r\n    //-------------------------------------------------------------------------------------------------\r\n\r\n    render() {\r\n        const { match } = this.props;\r\n\r\n        // match_state: \"Over\", detail: \"South Africa won by 6 wickets\"\r\n\r\n        return (\r\n            <div>\r\n\r\n               \r\n\r\n                {/* Following Code Render Header text for Live-Matches */}\r\n                {/* eg:  Title, Venue, Match Start Date */}\r\n                {match.title}, {' at '}  \r\n                <span style={{ color: 'Gray' }}>{match.venue.title}</span>\r\n\r\n                 {/* Show Result if Match Finished other Wise Printit UpComming */} \r\n                 {match.match_state==='Over' ? 'Result' : ''} \r\n                   \r\n                {/* Following Code Render Live and Scheduled Matched */}\r\n                {/* It Will Show Upcomming instead of Scheduled */}\r\n                <span className={this.headerTextMatchStatusClass(match.match_state)}>\r\n                    {this.renderMatchStatusAtHeader(match)}\r\n                </span>  \r\n\r\n                <br/> \r\n\r\n                {/* Following Code Render Flag of Team A */}\r\n                <img className='header-flag-image' style={{ width: 25 + \"px\", height: 25 + \"px\" }}\r\n                    src={match.teamA.flag_url} alt=\"no Iamge\" />\r\n\r\n                <span className=\"header-text-teams-shortname\">\r\n                    {match.teamA.short_name}\r\n                </span>\r\n\r\n                {/* Following Code Render Score team A */}\r\n                <span className=\"header-text-teama-score\">\r\n                    {this.renderMatchTeamATag(match)}\r\n                </span>\r\n                <br />\r\n\r\n                {/* Following Code Render Flags of team B */}\r\n                <img className='header-flag-image' style={{ width: 25 + \"px\", height: 25 + \"px\" }}\r\n                    src={match.teamB.flag_url} alt=\"no Iamge\" />\r\n                <span className=\"header-text-teams-shortname\">\r\n                    {match.teamB.short_name}\r\n                </span>\r\n\r\n                {/* Following Code Render Score team B */}\r\n                <span className=\"header-text-teama-score\">\r\n                    {this.renderMatchTeamBTag(match)}\r\n                </span>\r\n\r\n                <br/>\r\n               \r\n                {/* Match Status/Result on the basic of match_state='Over' show Result Status */} \r\n                {match.match_state==='Over' ? match.detail : ''} \r\n               \r\n                {/* Match Status/Result on the basic of match_state='Over' show Result Status */}         \r\n                <span>\r\n                    {\" \"} {Moment(new Date(match.match_start)).format(\"DD MMM\")}\r\n                    {\", \"}{Moment(new Date(match.match_start)).format(\"hh:mm a\")}\r\n                    <br />\r\n                </span>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RenderMatch;"]},"metadata":{},"sourceType":"module"}