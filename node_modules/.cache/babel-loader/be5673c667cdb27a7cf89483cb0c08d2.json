{"ast":null,"code":"import _classCallCheck from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\react\\\\cric-ngif\\\\src\\\\components\\\\home\\\\matchHeader.jsx\";\nimport React, { Component } from \"react\";\nimport Moment from 'moment'; //import HeaderLiveMatch from  './headerLiveMatch';\n\nimport '../../assets/css/home/matchHeader.css';\n\nvar MatchHeader =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MatchHeader, _Component);\n\n  function MatchHeader(props) {\n    var _this;\n\n    _classCallCheck(this, MatchHeader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MatchHeader).call(this, props));\n\n    _this.headerTextMatchStatusClass = function (status) {\n      var isClass = status === 'Live' ? 'header-text-match-status-live' : 'header-text-match-status-normal';\n      return isClass;\n    };\n\n    _this.state = {\n      error: null,\n      isLoaded: false,\n      liveMatches: [],\n      selectedClassName: ''\n    };\n    return _this;\n  }\n\n  _createClass(MatchHeader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"http://back.cricwick.net/api/v2/main/live_matches\").then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        _this2.setState({\n          isLoaded: true,\n          liveMatches: result\n        });\n      }, // Handling Erro\n      function (error) {\n        _this2.setState({\n          isLoaded: true,\n          error: error\n        });\n      });\n    }\n  }, {\n    key: \"renderMatchTeamATag\",\n    value: function renderMatchTeamATag(match) {\n      var tagText = '';\n\n      if (match.innings.length > 0) {\n        tagText = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, match.innings[0].runs, \" \", \"/\", \" \", match.innings[0].wickets, \" \", \" \", \"(\", match.innings[0].overs, \")\");\n      }\n\n      return tagText;\n    }\n  }, {\n    key: \"renderMatchTeamBTag\",\n    value: function renderMatchTeamBTag(match) {\n      var tagText = '';\n\n      if (!match.innings[1]) {\n        console.log(match.innings[1]);\n        tagText = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        });\n        return;\n      }\n\n      if (match.innings.length >= 1) {\n        tagText = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, match.innings[1].runs, \" \", \"/\", \" \", match.innings[1].wickets, \" \", \" \", \"(\", match.innings[1].overs, \")\");\n      }\n\n      return tagText;\n    } //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \n\n  }, {\n    key: \"renderMatchStatus\",\n    value: function renderMatchStatus(match) {\n      var tagText = '';\n\n      if (match.match_state === 'Scheduled') {\n        return tagText;\n      }\n\n      if (match.break_type === \"\") {\n        tagText = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, match.match_state, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }));\n      } else {\n        tagText = React.createElement(\"span\", {\n          style: {\n            padding: 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, match.break_type, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }));\n      }\n\n      return tagText;\n    } //-------------------------------------------------------------------------------------------------\n    //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \n\n  }, {\n    key: \"renderEmptyBreakForHeader\",\n    value: function renderEmptyBreakForHeader(match) {\n      var tagText = '';\n\n      if (match.match_state === 'Scheduled') {\n        tagText = React.createElement(\"span\", {\n          style: {\n            padding: 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, '', \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }));\n        return tagText;\n      }\n    } //-------------------------------------------------------------------------------------------------\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          error = _this$state.error,\n          isLoaded = _this$state.isLoaded,\n          liveMatches = _this$state.liveMatches;\n\n      if (error) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, \" Error : \", error.message);\n      } else if (!isLoaded) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, \" Loading Data.... \");\n      } else {\n        return React.createElement(\"div\", {\n          className: \"scrolling-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, liveMatches.live_matches.map(function (match) {\n          return React.createElement(\"div\", {\n            className: \"card card-for-scroll p-1 \",\n            key: match.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"card-content\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: _this3.headerTextMatchStatusClass(match.match_state),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }, _this3.renderMatchStatus(match)), match.title, \", \", ' at ', \"  \", React.createElement(\"span\", {\n            style: {\n              color: 'Gray'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }, match.venue.title), React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          }, \" \", \" \", Moment(new Date(match.match_start)).format(\"DD MMM\"), \", \", Moment(new Date(match.match_start)).format(\"hh:mm:a\"), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146\n            },\n            __self: this\n          })), React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          }, _this3.renderEmptyBreakForHeader(match)), React.createElement(\"img\", {\n            className: \"header-flag-image\",\n            src: match.teamA.flag_url,\n            alt: \"no Iamge\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154\n            },\n            __self: this\n          }), React.createElement(\"span\", {\n            className: \"header-text-teams-shortname\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156\n            },\n            __self: this\n          }, match.teamA.short_name), React.createElement(\"span\", {\n            className: \"header-text-teama-score\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }, _this3.renderMatchTeamBTag(match)), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          }), React.createElement(\"img\", {\n            className: \"header-flag-image\",\n            src: match.teamB.flag_url,\n            alt: \"no Iamge\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166\n            },\n            __self: this\n          }), React.createElement(\"span\", {\n            className: \"header-text-teams-shortname\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168\n            },\n            __self: this\n          }, match.teamB.short_name), React.createElement(\"span\", {\n            className: \"header-text-teama-score\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173\n            },\n            __self: this\n          }, _this3.renderMatchTeamATag(match))));\n        }));\n      }\n    }\n  }]);\n\n  return MatchHeader;\n}(Component);\n\nexport default MatchHeader;","map":{"version":3,"sources":["D:\\react\\cric-ngif\\src\\components\\home\\matchHeader.jsx"],"names":["React","Component","Moment","MatchHeader","props","headerTextMatchStatusClass","status","isClass","state","error","isLoaded","liveMatches","selectedClassName","fetch","then","res","json","result","setState","match","tagText","innings","length","runs","wickets","overs","console","log","match_state","break_type","padding","message","live_matches","map","id","renderMatchStatus","title","color","venue","Date","match_start","format","renderEmptyBreakForHeader","teamA","flag_url","short_name","renderMatchTeamBTag","teamB","renderMatchTeamATag"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Moment from 'moment';\r\n//import HeaderLiveMatch from  './headerLiveMatch';\r\nimport '../../assets/css/home/matchHeader.css';\r\n\r\n\r\nclass MatchHeader extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            liveMatches: [],\r\n            selectedClassName : ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        fetch(\"http://back.cricwick.net/api/v2/main/live_matches\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        liveMatches: result\r\n                    });\r\n                },\r\n\r\n                // Handling Erro\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n   \r\n    headerTextMatchStatusClass = (status) =>{\r\n        const isClass = status === 'Live' ? 'header-text-match-status-live' : 'header-text-match-status-normal';\r\n        return isClass; \r\n    }\r\n\r\n    renderMatchTeamATag(match){\r\n        let tagText ='';\r\n        \r\n        if(match.innings.length > 0) {\r\n          tagText = \r\n          <span> \r\n              {match.innings[0].runs}{ \" \"}/{ \" \"}\r\n              {match.innings[0].wickets} {\" \"} \r\n              ({match.innings[0].overs}) \r\n          </span>\r\n        }\r\n\r\n        return tagText;\r\n    }\r\n\r\n    renderMatchTeamBTag(match){\r\n        let tagText = '';\r\n\r\n        if(!match.innings[1]){\r\n           console.log(match.innings[1])\r\n           tagText =  <span></span>\r\n           return \r\n        }   \r\n\r\n        if (match.innings.length >= 1) {\r\n            tagText =\r\n                <span>\r\n                    {match.innings[1].runs}{\" \"}/{\" \"}\r\n                    {match.innings[1].wickets} {\" \"}\r\n                    ({match.innings[1].overs})\r\n                </span>\r\n          \r\n        }\r\n        return tagText;\r\n   }\r\n\r\n   //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \r\n   renderMatchStatus(match) {\r\n        let tagText = '';\r\n\r\n       if (match.match_state === 'Scheduled') {\r\n           return tagText;\r\n       }\r\n       \r\n        if (match.break_type === \"\") {\r\n            tagText = <span>\r\n                         {match.match_state} <br/>\r\n                      </span>\r\n        } else{\r\n            tagText = <span style={{padding:0}}>\r\n                         {match.break_type} <br/>\r\n                      </span>\r\n        }\r\n        return tagText;\r\n   }\r\n   //-------------------------------------------------------------------------------------------------\r\n\r\n //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \r\n    renderEmptyBreakForHeader(match) {\r\n        let tagText = '';\r\n        if (match.match_state === 'Scheduled') {\r\n             tagText = <span style={{padding:0}}>\r\n                              {''} <br/>\r\n                       </span>\r\n            return tagText;\r\n        }\r\n    }\r\n//-------------------------------------------------------------------------------------------------\r\n\r\n\r\n   \r\n    render() {\r\n        const { error, isLoaded, liveMatches } = this.state;\r\n\r\n        if (error) {\r\n            return (<div> Error : {error.message}</div>);\r\n        } else if (!isLoaded) {\r\n            return (<div> Loading Data.... </div>);\r\n        } else {\r\n            return (\r\n              <div className=\"scrolling-wrapper\">  \r\n                    \r\n                    {liveMatches.live_matches.map(match => (\r\n                        <div className=\"card card-for-scroll p-1 \" key={match.id} >\r\n                            <div className=\"card-content\">\r\n                                  \r\n                                   {/* Following Code Render Live and Scheduled Matched */}\r\n                                   {/* If Break Type is Empty Then It Will Show  Break Type Otherr Wise MATCH_STATUS */}\r\n                                   <span className={this.headerTextMatchStatusClass(match.match_state)}>\r\n                                       {this.renderMatchStatus(match)}\r\n                                   </span>\r\n\r\n                                   {/* Following Code Render Header text for Live-Matches */}\r\n                                   {/* eg:  Title, Venue, Match Start Date */}\r\n                                   {match.title}, {' at '}  <span style={{color:'Gray'}}>{match.venue.title}</span>  \r\n                                   \r\n                                   <span>\r\n                                       {\" \"} {Moment(new Date(match.match_start)).format(\"DD MMM\")}  \r\n                                       {\", \"}{Moment(new Date(match.match_start)).format(\"hh:mm:a\")}\r\n                                       <br/>\r\n                                   </span>\r\n                                   \r\n                                   <span>\r\n                                       {this.renderEmptyBreakForHeader(match)}\r\n                                   </span>\r\n                                                                                                                                         \r\n                                   {/* Following Code Render Flags or team A */}                                 \r\n                                   <img className='header-flag-image' \r\n                                        src={match.teamA.flag_url} alt=\"no Iamge\"/>\r\n                                        <span className = \"header-text-teams-shortname\">  \r\n                                            {match.teamA.short_name}\r\n                                        </span>  \r\n\r\n                                        <span className = \"header-text-teama-score\">\r\n                                             {this.renderMatchTeamBTag(match)} \r\n                                        </span>\r\n                                   <br/>\r\n                                   \r\n                                   {/* Following Code Render Flags or team B */}  \r\n                                   <img className='header-flag-image' \r\n                                        src={match.teamB.flag_url} alt=\"no Iamge\"/>\r\n                                        <span className = \"header-text-teams-shortname\">  \r\n                                            {match.teamB.short_name}\r\n                                        </span> \r\n\r\n                                        {/* Following Code Render Score team B */} \r\n                                        <span className = \"header-text-teama-score\">\r\n                                             {this.renderMatchTeamATag(match)} \r\n                                        </span>\r\n                                     \r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n\r\n               </div>\r\n             );\r\n        }\r\n    }\r\n}\r\n\r\nexport default MatchHeader;"]},"metadata":{},"sourceType":"module"}