{"ast":null,"code":"import _classCallCheck from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\react\\\\cric-ngif\\\\src\\\\components\\\\home\\\\matchHeader.jsx\";\nimport React, { Component } from \"react\";\nimport Moment from 'moment'; //import HeaderLiveMatch from  './headerLiveMatch';\n\nimport '../../assets/css/home/matchHeader.css';\n\nvar MatchHeader =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MatchHeader, _Component);\n\n  function MatchHeader(props) {\n    var _this;\n\n    _classCallCheck(this, MatchHeader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MatchHeader).call(this, props));\n\n    _this.headerTextMatchStatusClass = function (status) {\n      var isClass = status === 'Live' ? 'header-text-match-status-live' : 'header-text-match-status-normal';\n      return isClass;\n    };\n\n    _this.state = {\n      error: null,\n      isLoaded: false,\n      liveMatches: [],\n      selectedClassName: ''\n    };\n    return _this;\n  }\n\n  _createClass(MatchHeader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"http://back.cricwick.net/api/v2/main/live_matches\").then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        _this2.setState({\n          isLoaded: true,\n          liveMatches: result\n        });\n      }, // Handling Erro\n      function (error) {\n        _this2.setState({\n          isLoaded: true,\n          error: error\n        });\n      });\n    }\n  }, {\n    key: \"renderMatchTeamATag\",\n    value: function renderMatchTeamATag(match) {\n      // innings_order = 1, 2, 3, 4\n      // batting_team_id\":  702,703 \n      // fielding_team_id\": 703,702\n      // inning.wickets, inning.run, inning.overs  \n      var scoreString = '';\n      var teamA = match.team_1_id; //console.log( \"A \" ,teamA);\n      //console.log( \"Innings \" , match);\n      // header-text-teama-score-active\n      // header-text-teama-score\n\n      if (!match.innings) {\n        //console.log(\"Team=>(A) not yet Played...\");\n        return '';\n      }\n\n      var maxInning = match.innings.length;\n      var innings = match.innings.filter(function (x) {\n        return x.batting_team_id === teamA;\n      });\n      innings.map(function (inning, inningCNT) {\n        if (match.format === 'T20' || match.format === 'ODI') {\n          scoreString += (inningCNT > 0 ? \" & \" : '') + inning.runs + \"/\" + inning.wickets + (inning.declared ? 'd' : '') + (maxInning === inning.innings_order ? \" (\" + inning.overs + \")\" : '');\n        } else {\n          scoreString += (inningCNT > 0 ? \" & \" : '') + inning.runs + \"/\" + inning.wickets + (inning.declared ? 'd' : '') + (maxInning === inning.innings_order ? \" (\" + inning.overs + \")\" : '');\n        }\n\n        return 'scoreString';\n      }); //console.log(scoreString); \n\n      return scoreString;\n    }\n  }, {\n    key: \"renderMatchTeamBTag\",\n    value: function renderMatchTeamBTag(match) {\n      // innings_order = 1, 2, 3, 4\n      // batting_team_id\":  702,703 \n      // fielding_team_id\": 703,702\n      // inning.wickets, inning.run, inning.overs  \n      var scoreString = '';\n      var teamB = match.team_2_id;\n\n      if (!match.innings) {\n        //console.log(\"Team=>(B) not yet Played...\");\n        return '';\n      }\n\n      var maxInning = match.innings.length;\n      var innings = match.innings.filter(function (x) {\n        return x.batting_team_id === teamB;\n      });\n      innings.map(function (inning, inningCNT) {\n        if (match.format === 'T20' || match.format === 'ODI') {\n          scoreString += (inningCNT > 0 ? \" & \" : '') + inning.runs + \"/\" + inning.wickets + (inning.declared ? 'd' : '') + (maxInning === inning.innings_order ? \" (\" + inning.overs + \")\" : '');\n        } else {\n          scoreString += (inningCNT > 0 ? \" & \" : '') + inning.runs + \"/\" + inning.wickets + (inning.declared ? 'd' : '') + (maxInning === inning.innings_order ? \" (\" + inning.overs + \")\" : '');\n        }\n\n        return 'scoreString';\n      });\n      return scoreString;\n    } //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \n\n  }, {\n    key: \"renderMatchStatus\",\n    value: function renderMatchStatus(match) {\n      var tagText = '';\n\n      if (match.match_state === 'Scheduled') {\n        return tagText;\n      }\n\n      if (match.break_type === \"\") {\n        tagText = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, match.match_state, \" \", ' - ', \" \", match.format, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }));\n      } else {\n        tagText = React.createElement(\"span\", {\n          style: {\n            padding: 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, match.break_type, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }));\n      }\n\n      return tagText;\n    } //-------------------------------------------------------------------------------------------------\n    //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \n\n  }, {\n    key: \"renderEmptyBreakForHeader\",\n    value: function renderEmptyBreakForHeader(match) {\n      var tagText = '';\n\n      if (match.match_state === 'Scheduled') {\n        tagText = React.createElement(\"span\", {\n          style: {\n            padding: 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, '', \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }));\n        return tagText;\n      }\n    } //-------------------------------------------------------------------------------------------------\n    //This method COMPOSE DATE UPCOMING DATE depending upon match STATUS. \n\n  }, {\n    key: \"renderUpcommingDate\",\n    value: function renderUpcommingDate(match) {\n      var tagText = '';\n\n      if (match.match_state === 'Scheduled') {\n        tagText = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, \" \", \" \", Moment(new Date(match.match_start)).format(\"DD MMM\"), \", \", Moment(new Date(match.match_start)).format(\"hh:mm a\"));\n      }\n\n      return tagText;\n    } //-------------------------------------------------------------------------------------------------\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          error = _this$state.error,\n          isLoaded = _this$state.isLoaded,\n          liveMatches = _this$state.liveMatches;\n\n      if (error) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, \" Error : \", error.message);\n      } else if (!isLoaded) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, \" Loading Data.... \");\n      } else {\n        return React.createElement(\"div\", {\n          className: \"scrolling-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, liveMatches.live_matches.map(function (match) {\n          return React.createElement(\"div\", {\n            className: \"card card-for-scroll p-1 \",\n            key: match.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 190\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"card-content\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: _this3.headerTextMatchStatusClass(match.match_state),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 195\n            },\n            __self: this\n          }, _this3.renderMatchStatus(match)), match.title, \", \", ' at ', \"  \", React.createElement(\"span\", {\n            style: {\n              color: 'Gray'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 201\n            },\n            __self: this\n          }, match.venue.title), React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203\n            },\n            __self: this\n          }, _this3.renderUpcommingDate(match), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            },\n            __self: this\n          })), React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 208\n            },\n            __self: this\n          }, _this3.renderEmptyBreakForHeader(match)), React.createElement(\"img\", {\n            className: \"header-flag-image\",\n            src: match.teamA.flag_url,\n            alt: \"no Iamge\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 213\n            },\n            __self: this\n          }), React.createElement(\"span\", {\n            className: \"header-text-teams-shortname\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 215\n            },\n            __self: this\n          }, match.teamA.short_name), React.createElement(\"span\", {\n            className: \"header-text-teams-score\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 219\n            },\n            __self: this\n          }, _this3.renderMatchTeamATag(match)), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 222\n            },\n            __self: this\n          }), React.createElement(\"img\", {\n            className: \"header-flag-image\",\n            src: match.teamB.flag_url,\n            alt: \"no Iamge\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 225\n            },\n            __self: this\n          }), React.createElement(\"span\", {\n            className: \"header-text-teams-shortname\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227\n            },\n            __self: this\n          }, match.teamB.short_name), React.createElement(\"span\", {\n            className: \"header-text-teams-score\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 232\n            },\n            __self: this\n          }, _this3.renderMatchTeamBTag(match))));\n        }));\n      }\n    }\n  }]);\n\n  return MatchHeader;\n}(Component);\n\nexport default MatchHeader;","map":{"version":3,"sources":["D:\\react\\cric-ngif\\src\\components\\home\\matchHeader.jsx"],"names":["React","Component","Moment","MatchHeader","props","headerTextMatchStatusClass","status","isClass","state","error","isLoaded","liveMatches","selectedClassName","fetch","then","res","json","result","setState","match","scoreString","teamA","team_1_id","innings","maxInning","length","filter","x","batting_team_id","map","inning","inningCNT","format","runs","wickets","declared","innings_order","overs","teamB","team_2_id","tagText","match_state","break_type","padding","Date","match_start","message","live_matches","id","renderMatchStatus","title","color","venue","renderUpcommingDate","renderEmptyBreakForHeader","flag_url","short_name","renderMatchTeamATag","renderMatchTeamBTag"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Moment from 'moment';\r\n//import HeaderLiveMatch from  './headerLiveMatch';\r\nimport '../../assets/css/home/matchHeader.css';\r\n\r\n\r\nclass MatchHeader extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            liveMatches: [],\r\n            selectedClassName : ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        fetch(\"http://back.cricwick.net/api/v2/main/live_matches\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        liveMatches: result\r\n                    });\r\n                },\r\n\r\n                // Handling Erro\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n   \r\n    headerTextMatchStatusClass = (status) =>{\r\n        const isClass = status === 'Live' ? 'header-text-match-status-live' : 'header-text-match-status-normal';\r\n        return isClass; \r\n    }\r\n\r\n    renderMatchTeamATag(match){\r\n        \r\n         // innings_order = 1, 2, 3, 4\r\n        // batting_team_id\":  702,703 \r\n        // fielding_team_id\": 703,702\r\n        // inning.wickets, inning.run, inning.overs  \r\n\r\n        let scoreString = '';\r\n        const teamA = match.team_1_id;\r\n        \r\n        //console.log( \"A \" ,teamA);\r\n        //console.log( \"Innings \" , match);\r\n        // header-text-teama-score-active\r\n        // header-text-teama-score\r\n        \r\n        if(!match.innings){\r\n            //console.log(\"Team=>(A) not yet Played...\");\r\n            return '';\r\n        }\r\n\r\n        const maxInning =  match.innings.length; \r\n\r\n        const innings =  match.innings.filter(x => x.batting_team_id === teamA)\r\n       \r\n\r\n        innings.map((inning, inningCNT) => {\r\n\r\n            if (match.format === 'T20' || match.format === 'ODI') {\r\n               \r\n                scoreString += (inningCNT > 0 ? \" & \" : '')\r\n                    + inning.runs + \"/\" + inning.wickets + (inning.declared ? 'd' : '')\r\n                    + (maxInning === inning.innings_order ? \" (\" + inning.overs + \")\" : '')\r\n\r\n            } else {\r\n                scoreString += (inningCNT > 0 ? \" & \" : '')\r\n                    + inning.runs + \"/\" + inning.wickets + (inning.declared ? 'd' : '') \r\n                    + (maxInning === inning.innings_order ? \" (\" + inning.overs + \")\" : '')\r\n            }\r\n\r\n            return 'scoreString';\r\n        })\r\n\r\n        //console.log(scoreString); \r\n\r\n        return scoreString;\r\n    }\r\n\r\n    renderMatchTeamBTag(match){\r\n        // innings_order = 1, 2, 3, 4\r\n        // batting_team_id\":  702,703 \r\n        // fielding_team_id\": 703,702\r\n        // inning.wickets, inning.run, inning.overs  \r\n\r\n        let scoreString = '';\r\n        const teamB = match.team_2_id;\r\n        \r\n        if(!match.innings){\r\n            //console.log(\"Team=>(B) not yet Played...\");\r\n            return '';\r\n        }\r\n\r\n        const maxInning =  match.innings.length; \r\n        const innings =  match.innings.filter(x => x.batting_team_id === teamB) \r\n       \r\n        innings.map((inning, inningCNT) => {\r\n\r\n            if (match.format === 'T20' || match.format === 'ODI') {\r\n               \r\n                scoreString += (inningCNT > 0 ? \" & \" : '')\r\n                    + inning.runs + \"/\" + inning.wickets + (inning.declared ? 'd' : '') \r\n                    + (maxInning === inning.innings_order ? \" (\" + inning.overs + \")\" : '')\r\n\r\n            } else {\r\n                scoreString += (inningCNT > 0 ? \" & \" : '')\r\n                    + inning.runs + \"/\" + inning.wickets + (inning.declared ? 'd' : '')\r\n                    + (maxInning === inning.innings_order ? \" (\" + inning.overs + \")\" : '')\r\n            }\r\n\r\n            return 'scoreString';\r\n        })\r\n               \r\n        return scoreString;\r\n   }\r\n\r\n   //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \r\n   renderMatchStatus(match) {\r\n        let tagText = '';\r\n\r\n       if (match.match_state === 'Scheduled') {\r\n           return tagText;\r\n       }\r\n       \r\n        if (match.break_type === \"\") {\r\n            tagText = <span>\r\n                        {match.match_state} {' - '} {match.format} <br/>\r\n                      </span>\r\n        } else{\r\n            tagText = <span style={{padding:0}}>\r\n                         {match.break_type}<br/>\r\n                      </span>\r\n        }\r\n        return tagText;\r\n   }\r\n   //-------------------------------------------------------------------------------------------------\r\n\r\n //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \r\n    renderEmptyBreakForHeader(match) {\r\n        let tagText = '';\r\n        if (match.match_state === 'Scheduled') {\r\n             tagText = <span style={{padding:0}}>\r\n                              {''} <br/>\r\n                       </span>\r\n            return tagText;\r\n        }\r\n    }\r\n//-------------------------------------------------------------------------------------------------\r\n\r\n//This method COMPOSE DATE UPCOMING DATE depending upon match STATUS. \r\nrenderUpcommingDate(match) {\r\n    let tagText = '';\r\n    if (match.match_state === 'Scheduled') {\r\n        tagText =  <span>\r\n                      {\" \"} {Moment(new Date(match.match_start)).format(\"DD MMM\")}  \r\n                      {\", \"}{Moment(new Date(match.match_start)).format(\"hh:mm a\")}\r\n                   </span>\r\n    }\r\n    return tagText;\r\n}\r\n\r\n//-------------------------------------------------------------------------------------------------\r\n   \r\n    render() {\r\n        const { error, isLoaded, liveMatches } = this.state;\r\n\r\n        if (error) {\r\n            return (<div> Error : {error.message}</div>);\r\n        } else if (!isLoaded) {\r\n            return (<div> Loading Data.... </div>);\r\n        } else {\r\n            return (\r\n              <div className=\"scrolling-wrapper\">  \r\n                    \r\n                    {liveMatches.live_matches.map(match => (\r\n                        <div className=\"card card-for-scroll p-1 \" key={match.id} >\r\n                            <div className=\"card-content\">\r\n                                  \r\n                                   {/* Following Code Render Live and Scheduled Matched */}\r\n                                   {/* If Break Type is Empty Then It Will Show  Break Type Otherr Wise MATCH_STATUS */}\r\n                                   <span className={this.headerTextMatchStatusClass(match.match_state)}>\r\n                                       {this.renderMatchStatus(match)}\r\n                                   </span>\r\n\r\n                                   {/* Following Code Render Header text for Live-Matches */}\r\n                                   {/* eg:  Title, Venue, Match Start Date */}\r\n                                   {match.title}, {' at '}  <span style={{color:'Gray'}}>{match.venue.title}</span>  \r\n                                   \r\n                                   <span>\r\n                                        {this.renderUpcommingDate(match)}\r\n                                       <br/>\r\n                                   </span>\r\n                                   \r\n                                   <span>\r\n                                       {this.renderEmptyBreakForHeader(match)}\r\n                                   </span>\r\n                                                                                                                                         \r\n                                   {/* Following Code Render Flags or team A */}                                 \r\n                                   <img className='header-flag-image' \r\n                                        src={match.teamA.flag_url} alt=\"no Iamge\"/>\r\n                                        <span className = \"header-text-teams-shortname\">  \r\n                                            {match.teamA.short_name}\r\n                                        </span>  \r\n\r\n                                        <span className = \"header-text-teams-score\">\r\n                                             {this.renderMatchTeamATag(match)} \r\n                                        </span>\r\n                                   <br/>\r\n                                   \r\n                                   {/* Following Code Render Flags or team B */}  \r\n                                   <img className='header-flag-image' \r\n                                        src={match.teamB.flag_url} alt=\"no Iamge\"/>\r\n                                        <span className = \"header-text-teams-shortname\">  \r\n                                            {match.teamB.short_name}\r\n                                        </span> \r\n\r\n                                        {/* Following Code Render Score team B */} \r\n                                        <span className = \"header-text-teams-score\">\r\n                                             {this.renderMatchTeamBTag(match)} \r\n                                        </span>\r\n                                     \r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n\r\n               </div>\r\n             );\r\n        }\r\n    }\r\n}\r\n\r\nexport default MatchHeader;"]},"metadata":{},"sourceType":"module"}