{"ast":null,"code":"// import axios from 'axios';\nimport axios from 'superagent';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css'; // Note: this Service will use in case if an Request error\n//Service is use for as a Http request Inteceptor \n// 1st Agument use in case for SUCESS. So we have palce null we are concerned with Errors\n// 2nd Agument use in case for ERROR. We have concerned need work on it.   \n\naxios.interceptors.response.use(null, function (error) {\n  // Expected Client Side Http Error Staus Codes\n  var expectedError = error.response && error.response.status >= 400 && error.response.status <= 500; // if there is an Unexpected Error so if status code is different than\n  // Expected errors it should be a Un-Expected one.\n\n  if (!expectedError) {\n    toast.error(\"An Un-expected error occur during processing...\");\n  } // Reject promise in case of an Error\n\n\n  return Promise.reject(error);\n});\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete\n};","map":{"version":3,"sources":["D:\\projects\\react\\cric-ngif\\src\\services\\httpService.js"],"names":["axios","toast","interceptors","response","use","error","expectedError","status","Promise","reject","get","post","put","delete"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAAQC,KAAR,QAAoB,gBAApB;AAEA,OAAO,2CAAP,C,CAEA;AAEA;AACA;AACA;;AACAD,KAAK,CAACE,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,IAAhC,EAAuC,UAAAC,KAAK,EAAI;AAE5C;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACF,QAAN,IACAE,KAAK,CAACF,QAAN,CAAeI,MAAf,IAAyB,GADzB,IAEAF,KAAK,CAACF,QAAN,CAAeI,MAAf,IAAyB,GAF/C,CAH4C,CAO5C;AACA;;AACA,MAAG,CAACD,aAAJ,EAAkB;AACfL,IAAAA,KAAK,CAACI,KAAN,CAAY,iDAAZ;AACF,GAX2C,CAa5C;;;AACA,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AAEH,CAhBD;AAkBA,eAAc;AACVK,EAAAA,GAAG,EAAMV,KAAK,CAACU,GADL;AAEVC,EAAAA,IAAI,EAAKX,KAAK,CAACW,IAFL;AAGVC,EAAAA,GAAG,EAAMZ,KAAK,CAACY,GAHL;AAIVC,EAAAA,MAAM,EAAGb,KAAK,CAACa;AAJL,CAAd","sourcesContent":["// import axios from 'axios';\r\nimport axios from 'superagent';\r\nimport {toast} from 'react-toastify';\r\n\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\n\r\n// Note: this Service will use in case if an Request error\r\n  \r\n//Service is use for as a Http request Inteceptor \r\n// 1st Agument use in case for SUCESS. So we have palce null we are concerned with Errors\r\n// 2nd Agument use in case for ERROR. We have concerned need work on it.   \r\naxios.interceptors.response.use(null,  error => {\r\n  \r\n    // Expected Client Side Http Error Staus Codes\r\n    const expectedError = error.response && \r\n                          error.response.status >= 400 &&\r\n                          error.response.status <= 500;\r\n   \r\n    // if there is an Unexpected Error so if status code is different than\r\n    // Expected errors it should be a Un-Expected one.\r\n    if(!expectedError){\r\n       toast.error(\"An Un-expected error occur during processing...\");  \r\n    } \r\n    \r\n    // Reject promise in case of an Error\r\n    return Promise.reject(error);\r\n\r\n});\r\n\r\nexport default{\r\n    get    : axios.get,\r\n    post   : axios.post,\r\n    put    : axios.put,\r\n    delete : axios.delete\r\n}\r\n"]},"metadata":{},"sourceType":"module"}