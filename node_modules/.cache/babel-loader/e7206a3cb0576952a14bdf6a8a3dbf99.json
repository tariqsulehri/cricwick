{"ast":null,"code":"import _classCallCheck from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\react\\\\cric-ngif\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\react\\\\cric-ngif\\\\src\\\\components\\\\home\\\\renderMatch.jsx\";\nimport React, { Component } from 'react';\nimport Moment from 'moment';\n\nvar RenderMatch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RenderMatch, _Component);\n\n  function RenderMatch(props) {\n    var _this;\n\n    _classCallCheck(this, RenderMatch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RenderMatch).call(this, props));\n\n    _this.headerTextMatchStatusClass = function (status) {\n      var isClass = status === 'Live' ? 'header-text-match-status-live' : 'header-text-match-status-normal';\n      return isClass;\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(RenderMatch, [{\n    key: \"renderMatchTeamATag\",\n    value: function renderMatchTeamATag(match) {\n      var tagText = '';\n      var teamA = match.team_1_id;\n      console.log(teamA); // if(match.innings.length > 0) {\n      //   tagText = \n      //   <span> \n      //       {match.innings[0].runs}{ \" \"}/{ \" \"}\n      //       {match.innings[0].wickets} {\" \"} \n      //       ({match.innings[0].overs}) \n      //   </span>\n      // }\n\n      return tagText;\n    }\n  }, {\n    key: \"renderMatchTeamBTag\",\n    value: function renderMatchTeamBTag(match) {\n      var tagText = ''; // if(!match.innings){\n      //    console.log(match.innings)\n      //    tagText =  <span></span>\n      //    return \n      // }   \n      // if (match.innings.length >= 1) {\n      //     tagText =\n      //         <span>\n      //             {match.innings[1].runs}{\" \"}/{\" \"}\n      //             {match.innings[1].wickets} {\" \"}\n      //             ({match.innings[1].overs})\n      //         </span>\n      // }\n\n      return tagText;\n    } //This Method Change Color on the basic of Match Status if Live it will be red\n\n  }, {\n    key: \"renderMatchStatusAtHeader\",\n    //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \n    value: function renderMatchStatusAtHeader(match) {\n      var tagText = '';\n\n      if (match.match_state === 'Scheduled') {\n        tagText = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, \"Upcomming\", \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }));\n        return tagText;\n      }\n\n      if (match.break_type === \"\") {\n        tagText = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, match.match_state, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }));\n      } else {\n        tagText = React.createElement(\"span\", {\n          style: {\n            padding: 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, match.break_type, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }));\n      }\n\n      return tagText;\n    } //-------------------------------------------------------------------------------------------------\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var match = this.props.match; // match_state: \"Over\", detail: \"South Africa won by 6 wickets\"\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, match.title, \", \", ' at ', React.createElement(\"span\", {\n        style: {\n          color: 'Gray'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, match.venue.title), match.match_state === 'Over' ? 'Result' : '', React.createElement(\"span\", {\n        className: this.headerTextMatchStatusClass(match.match_state),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.renderMatchStatusAtHeader(match)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"header-flag-image\",\n        style: {\n          width: 25 + \"px\",\n          height: 25 + \"px\"\n        },\n        src: match.teamA.flag_url,\n        alt: \"no Iamge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"header-text-teams-shortname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, match.teamA.short_name), React.createElement(\"span\", {\n        className: \"header-text-teama-score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, this.renderMatchTeamBTag(match)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"header-flag-image\",\n        style: {\n          width: 25 + \"px\",\n          height: 25 + \"px\"\n        },\n        src: match.teamB.flag_url,\n        alt: \"no Iamge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"header-text-teams-shortname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, match.teamB.short_name), React.createElement(\"span\", {\n        className: \"header-text-teama-score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, this.renderMatchTeamATag(match)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), match.match_state === 'Over' ? match.detail : '', React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \" \", \" \", Moment(new Date(match.match_start)).format(\"DD MMM\"), \", \", Moment(new Date(match.match_start)).format(\"hh:mm a\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return RenderMatch;\n}(Component);\n\nexport default RenderMatch;","map":{"version":3,"sources":["D:\\react\\cric-ngif\\src\\components\\home\\renderMatch.jsx"],"names":["React","Component","Moment","RenderMatch","props","headerTextMatchStatusClass","status","isClass","state","match","tagText","teamA","team_1_id","console","log","match_state","break_type","padding","title","color","venue","renderMatchStatusAtHeader","width","height","flag_url","short_name","renderMatchTeamBTag","teamB","renderMatchTeamATag","detail","Date","match_start","format"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Moment from 'moment';\r\n\r\nclass RenderMatch extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    renderMatchTeamATag(match) {\r\n        let tagText = '';\r\n        const teamA = match.team_1_id;\r\n        console.log(teamA);\r\n        \r\n        // if(match.innings.length > 0) {\r\n        //   tagText = \r\n        //   <span> \r\n        //       {match.innings[0].runs}{ \" \"}/{ \" \"}\r\n        //       {match.innings[0].wickets} {\" \"} \r\n        //       ({match.innings[0].overs}) \r\n        //   </span>\r\n        // }\r\n\r\n        return tagText;\r\n    }\r\n\r\n    renderMatchTeamBTag(match) {\r\n        let tagText = '';\r\n\r\n        // if(!match.innings){\r\n        //    console.log(match.innings)\r\n        //    tagText =  <span></span>\r\n        //    return \r\n        // }   \r\n\r\n        // if (match.innings.length >= 1) {\r\n        //     tagText =\r\n        //         <span>\r\n        //             {match.innings[1].runs}{\" \"}/{\" \"}\r\n        //             {match.innings[1].wickets} {\" \"}\r\n        //             ({match.innings[1].overs})\r\n        //         </span>\r\n\r\n        // }\r\n        return tagText;\r\n    }\r\n\r\n    //This Method Change Color on the basic of Match Status if Live it will be red\r\n    headerTextMatchStatusClass = (status) => {\r\n        const isClass = status === 'Live' ? 'header-text-match-status-live' : 'header-text-match-status-normal';\r\n        return isClass;\r\n    }\r\n\r\n\r\n    //This method return the MATCH_STATUS text if the break type is Empty Otherwize return BREAK_TYPE. \r\n    renderMatchStatusAtHeader(match) {\r\n        let tagText = '';\r\n\r\n        if (match.match_state === 'Scheduled') {\r\n            tagText = <span>\r\n                            {\"Upcomming\"} <br/>\r\n                     </span> \r\n            return tagText;\r\n        }\r\n\r\n        if (match.break_type === \"\") {\r\n            tagText = <span>\r\n                {match.match_state} <br />\r\n            </span>\r\n        } else {\r\n            tagText = <span style={{ padding: 0 }}>\r\n                {match.break_type} <br />\r\n            </span>\r\n        }\r\n        return tagText;\r\n    }\r\n    //-------------------------------------------------------------------------------------------------\r\n\r\n    render() {\r\n        const { match } = this.props;\r\n\r\n        // match_state: \"Over\", detail: \"South Africa won by 6 wickets\"\r\n\r\n        return (\r\n            <div>\r\n\r\n               \r\n\r\n                {/* Following Code Render Header text for Live-Matches */}\r\n                {/* eg:  Title, Venue, Match Start Date */}\r\n                {match.title}, {' at '}  \r\n                <span style={{ color: 'Gray' }}>{match.venue.title}</span>\r\n\r\n                 {/* Show Result if Match Finished other Wise Printit UpComming */} \r\n                 {match.match_state==='Over' ? 'Result' : ''} \r\n                   \r\n                {/* Following Code Render Live and Scheduled Matched */}\r\n                {/* It Will Show Upcomming instead of Scheduled */}\r\n                <span className={this.headerTextMatchStatusClass(match.match_state)}>\r\n                    {this.renderMatchStatusAtHeader(match)}\r\n                </span>  \r\n                \r\n\r\n                <br/> \r\n\r\n                <img className='header-flag-image' style={{ width: 25 + \"px\", height: 25 + \"px\" }}\r\n                    src={match.teamA.flag_url} alt=\"no Iamge\" />\r\n\r\n                <span className=\"header-text-teams-shortname\">\r\n                    {match.teamA.short_name}\r\n                </span>\r\n\r\n                {/* Following Code Render Score team B */}\r\n                <span className=\"header-text-teama-score\">\r\n                    {this.renderMatchTeamBTag(match)}\r\n                </span>\r\n                <br />\r\n\r\n                {/* Following Code Render Flags of team B */}\r\n                <img className='header-flag-image' style={{ width: 25 + \"px\", height: 25 + \"px\" }}\r\n                    src={match.teamB.flag_url} alt=\"no Iamge\" />\r\n                <span className=\"header-text-teams-shortname\">\r\n                    {match.teamB.short_name}\r\n                </span>\r\n\r\n                {/* Following Code Render Score team A */}\r\n                <span className=\"header-text-teama-score\">\r\n                    {this.renderMatchTeamATag(match)}\r\n                </span>\r\n\r\n                <br/>\r\n               \r\n                {/* Match Status/Result on the basic of match_state='Over' show Result Status */} \r\n                {match.match_state==='Over' ? match.detail : ''} \r\n               \r\n                {/* Match Status/Result on the basic of match_state='Over' show Result Status */}         \r\n                <span>\r\n                    {\" \"} {Moment(new Date(match.match_start)).format(\"DD MMM\")}\r\n                    {\", \"}{Moment(new Date(match.match_start)).format(\"hh:mm a\")}\r\n                    <br />\r\n                </span>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RenderMatch;"]},"metadata":{},"sourceType":"module"}